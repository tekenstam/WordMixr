name: Continuous Integration

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Testing and Quality Checks
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Code formatting check (Black)
      run: |
        python -m black --check app/
        
    - name: Import sorting check (isort)
      run: |
        python -m isort --check-only app/
        
    - name: Linting (flake8)
      run: |
        python -m flake8 app/
        
    - name: Type checking (mypy)
      run: |
        python -m mypy app/ --ignore-missing-imports
        
    - name: Security check (bandit)
      run: |
        python -m bandit -r app/ -f json -o bandit-report.json || true
        python -m bandit -r app/
        
    - name: Unit Tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Data Quality Tests
      run: |
        pytest tests/test_solver.py::TestDataQuality -v
        pytest tests/test_solver.py::TestIntegration -v
        
    - name: API Integration Tests
      run: |
        pytest tests/test_api.py -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage.xml
          backend/bandit-report.json

  # Frontend Testing and Quality Checks  
  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript type checking
      run: npm run type-check
      
    - name: Linting (ESLint)
      run: npm run lint
      
    - name: Code formatting check (Prettier)
      run: npm run format:check
      
    - name: Unit Tests
      run: npm run test:coverage
      
    - name: Build check
      run: npm run build
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Docker Build Verification
  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        push: false
        tags: wordmixr-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: false
        tags: wordmixr-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # End-to-End Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start application stack
      run: |
        docker-compose up -d --build
        sleep 30  # Wait for services to be ready
        
    - name: Wait for backend health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
    - name: Wait for frontend
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
    - name: Test critical word scenarios
      run: |
        # Test BHACE scenario (should find "ache", "beach", "each")
        response=$(curl -s "http://localhost:8000/solve?letters=bhace&min_word_length=3")
        echo "BHACE response: $response"
        echo "$response" | jq -e '.success == true'
        echo "$response" | jq -e '.words | contains(["ache", "beach", "each"])'
        
        # Test GRINDK scenario (should find "gird", "grid", "grind", "drink")  
        response=$(curl -s "http://localhost:8000/solve?letters=grindk&min_word_length=4")
        echo "GRINDK response: $response"
        echo "$response" | jq -e '.success == true'
        echo "$response" | jq -e '.words | contains(["gird", "grid", "grind", "drink"])'
        
        # Test anagram functionality
        response=$(curl -s "http://localhost:8000/anagrams?letters=listen&min_word_length=6")
        echo "LISTEN anagrams: $response"
        echo "$response" | jq -e '.success == true'
        echo "$response" | jq -e '.words | contains(["listen", "silent"])'
        
    - name: Test API error handling
      run: |
        # Test validation errors
        response=$(curl -s "http://localhost:8000/solve?letters=&min_word_length=3")
        echo "Empty letters response: $response"
        echo "$response" | jq -e '.success == false'
        
    - name: Check dictionary quality
      run: |
        # Verify dictionary configuration
        response=$(curl -s "http://localhost:8000/health")
        echo "Health response: $response"
        echo "$response" | jq -e '.dictionary_loaded == true'
        echo "$response" | jq -e '.dictionary_size > 100000'  # Should be SCOWL Large
        
    - name: Stop application stack
      if: always()
      run: docker-compose down
      
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-logs
        path: |
          docker-compose.logs

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety
      run: pip install safety
      
    - name: Check Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        safety scan --output json --save-json safety-report.json || true
        safety scan
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Check npm dependencies
      run: |
        cd frontend
        npm ci
        npm audit --audit-level=high
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/safety-report.json

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start application
      run: |
        docker-compose up -d --build
        sleep 30
        
    - name: Install performance testing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2-utils jq
        
    - name: Backend performance test
      run: |
        # Test response time under load
        echo "Testing backend performance..."
        ab -n 100 -c 10 "http://localhost:8000/solve?letters=scramble&min_word_length=3" > perf-results.txt
        
        # Check average response time is reasonable (<500ms)
        avg_time=$(grep "Time per request:" perf-results.txt | head -1 | awk '{print $4}')
        echo "Average response time: ${avg_time}ms"
        
        # Verify no failures
        failed_requests=$(grep "Failed requests:" perf-results.txt | awk '{print $3}')
        if [ "$failed_requests" != "0" ]; then
          echo "Performance test failed: $failed_requests failed requests"
          exit 1
        fi
        
    - name: Stop application
      if: always()
      run: docker-compose down
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: perf-results.txt

  # Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, e2e-tests, security-scan, dependency-check, performance-test]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "Docker build: ${{ needs.docker-build.result }}"
        echo "E2E tests: ${{ needs.e2e-tests.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Dependency check: ${{ needs.dependency-check.result }}"
        echo "Performance test: ${{ needs.performance-test.result }}"
        
        if [[ "${{ needs.backend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.frontend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.docker-build.result }}" != "success" ]] || \
           [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "Critical tests failed!"
          exit 1
        fi
        
        echo "All critical tests passed! 🎉" 